    #[test]
    fun test_someNumbers() {
        use sui::test_scenario;

        // create test addresses representing users
        let admin = @0xBABE;
        let initial_owner = @0xCAFE;
        let final_owner = @0xFACE;

        // first transaction to emulate module initialization
        let scenario_val = test_scenario::begin(admin);
        let scenario = &mut scenario_val;
        {
            init(test_scenario::ctx(scenario));
        };

        test_scenario::next_tx(scenario, admin);
        {
            createSomeNumbers(1,2,3,4, initial_owner, test_scenario::ctx(scenario));
        };

        test_scenario::next_tx(scenario, initial_owner);
        {
            let numbers = test_scenario::take_from_sender<SomeNumbers>(scenario);
            sendSomeNumbers(numbers, final_owner, test_scenario::ctx(scenario))
        };

        test_scenario::next_tx(scenario, final_owner);
        {
            let numbers = test_scenario::take_from_sender<SomeNumbers>(scenario);
            assert!(numbers.no1+numbers.no2+numbers.no3+numbers.no4 == 10, 1);
            test_scenario::return_to_sender(scenario, numbers)
        };
        
        test_scenario::end(scenario_val);
    }